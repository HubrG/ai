// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Next AUTH

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application de base
enum UserRole {
  USER
  ADMIN
  EDITOR
  // ajouter d'autres r√¥les au besoin
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  date           DateTime?    @default(now())
  role           UserRole     @default(USER)
  tokenRemaining Int          @default(150000)
  tokenByMonth   Int          @default(150000)
  refilledAt     DateTime?    @default(now())
  accounts       Account[]
  sessions       Session[]
  pdfCreator     pdfCreator[]
  tokenSpent     tokenSpent[]
}

model tokenSpent {
  id         String       @id @default(cuid())
  userId     String
  token      Int
  GPTModelId String
  input      Boolean      @default(false)
  output     Boolean      @default(false)
  type       String       @default("input")
  createdAt  DateTime     @default(now())
  cost       Float        @default(0.00)
  GPTModel   tokenPricing @relation(fields: [GPTModelId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tokenPricing {
  id               String       @id @default(cuid())
  GPTModel         String
  priceFor1kInput  Float        @default(0.01)
  priceFor1kOutput Float        @default(0.03)
  createdAt        DateTime     @default(now())
  tokenSpent       tokenSpent[]
}

model userToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model pdfCreator {
  id          String           @id @default(cuid())
  userId      String
  createdAt   DateTime         @default(now())
  lang        String           @default("en")
  title       String           @default("My PDF")
  subject     String           @default("")
  updatedAt   DateTime?        @updatedAt
  length      String           @default("")
  personality String           @default("")
  tone        String           @default("")
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfPlan     pdfCreatorPlan[]
}

model pdfCreatorPlan {
  id         String    @id @default(cuid())
  pdfId      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  planTitle  String
  planLevel  String    @default("#")
  version    Int       @default(0)
  isSelected Boolean   @default(true)
  pdf               pdfCreator          @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  pdfCreatorContent pdfCreatorContent[]
}

model pdfCreatorContent {
  id             String         @id @default(cuid())
  planContent    String         @db.Text
  version        Int            @default(0)
  isSelected     Boolean        @default(true)
  planId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  pdfCreatorPlan pdfCreatorPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}
